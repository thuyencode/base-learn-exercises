{
  "language": "Solidity",
  "sources": {
    "contracts/Imports/ImportsExercise.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {SillyStringUtils} from \"./SillyStringUtils.sol\";\n\ncontract ImportsExercise {\n    using SillyStringUtils for string;\n\n    SillyStringUtils.Haiku public haiku;\n\n    function saveHaiku(\n        string calldata _line1,\n        string calldata _line2,\n        string calldata _line3\n    ) external {\n        haiku = SillyStringUtils.Haiku(_line1, _line2, _line3);\n    }\n\n    function getHaiku() external view returns (SillyStringUtils.Haiku memory) {\n        return haiku;\n    }\n\n    function shruggieHaiku()\n        external\n        view\n        returns (SillyStringUtils.Haiku memory _haiku)\n    {\n        _haiku = haiku;\n        _haiku.line3 = _haiku.line3.shruggie();\n    }\n}\n"
    },
    "contracts/Imports/SillyStringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary SillyStringUtils {\n    struct Haiku {\n        string line1;\n        string line2;\n        string line3;\n    }\n\n    function shruggie(\n        string memory _input\n    ) internal pure returns (string memory) {\n        return string.concat(_input, unicode\" ðŸ¤·\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}